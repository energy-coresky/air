#.yaml ///////////////////////////////////////////////////////////////////////////////////////
#._
+ @inc(.) ~/w2/_helper.yaml
#._

#.saw
minify:
  closure: @inc(.minify)
  param: $at = 0, $to = false
nice:
  closure: @inc(.nice)
  param: $at = 0, $to = 0
  #bind: `$this` by default
  #init:
data:
  array: @inc(.data)
  init: |
    $array['data']['array']['not_nl_curly'] = [ # step1,2
      T_NULLSAFE_OBJECT_OPERATOR => T_OBJECT_OPERATOR,
      T_NAME_QUALIFIED => T_NS_SEPARATOR,
    ];
    foreach ($array['data']['array'] as $key => $val)
        PHP::$data->{$key} = $val;
    unset($array['data']);
  #use: preprocessor, echo
  #preflight:
expr_nl:
  closure: @inc(.expr_nl)
  param: $y, $depth, $calc_max
double_nl:
  closure: @inc(.double_nl)
  param: $y, $x
#.saw

# ////////////////////////////////////////////////////////////////////////////////////////////
#.nice ///////////////////////////////////////////////////////////////////////////////////////
head:
  - |
    $depth = $dar = $d1 = $d2 = $s3 = $s5 = $q7 = $q8 = $q9 = $in_php = 0;
    $out = $line = $pv_exp = '';
    $ifs = $exp = [];
    $stk =& $this->stack;
  - @inc(.php_closures)
  - 'for ($y = $pv = $pv_nc = $this->tok($at); $y; $y = $y->new):'
  - @inc(.php_y_new)
  - |
    $oc = $this->int_bracket($y, true);
    if ($y->len && $y->close < 1) {
        $exp = $this->_saw('expr_nl', $y, $depth, $calc_max);
        if (in_array($pv->str, [';', '{', '(', '[']))
            $pv_exp = $pv->str;
    }
    if ($this->in_str) {
        $line .= $y->str;
        continue;
    }
  - @inc(.php_before_if)
  if:
    + @inc(.tag_rules)  # <? ?> T_HALT_COMPILER
    + @inc(.multilines) # <div, "A\nB" T_INLINE_HTML, T_CONSTANT_ENCAPSED_STRING
    + @inc(.elseifelse) # elseif else
    + @inc(.endwords)   # endif,..
    + @inc(.casecolon)  # : switch case default
    + @inc(.expr_tok)   # -> ?-> and or xor && ||
    + @inc(.chars)      # ?-.;|&=T_RETURN
    + @inc(.comments)   # //,..
    + @inc(.space_tail) # T_FOR, T_FOREACH, T_WHILE, T_IF, T_CATCH, T_ECHO, T_MATCH + _ctrl_d1 ($ifs)
    - on: in_array($y->tok, $this->_space_head, true)
      do: $line .= $line !== '' && $alfa($line[-1]) ? " $y->str" : $y->str; # ...(T_ELLIPSIS)
    - on: in_array($y->tok ?: $y->str, $this->_space_both, true)
      do: $line .= $ws($y); # > < / % * + T_USE T_AS ..and_so_on
    + @inc(.brackets)   # {[(,)]}
    default: |
      if ($line !== '' && $alfa($line[-1]) && $alfa($y->str[0]))
          $line .= ' ';
      $line .= $y->str . (in_array($y->tok, $this->_space_tail_2) ? ' ' : '');
  - |
    unset($new);
    $pv = $y;
    $y->com or $pv_nc = $y;
    endfor;
    return $out . $line . ($in_php ? "\n" : '');
#.nice

#.minify
head:
  - |
    $not = fn($chr) => !preg_match("/[a-z_\d\$]/i", $chr);
    for ($out = '', $y = $pv = $this->tok($at); $y; $y = $new) { //2do 1+++$a;
        if ($to && $y->i > $to)
            break;
        $new = $this->tok($y->i + 1);
        if (T_COMMENT == $y->tok || T_DOC_COMMENT == $y->tok) # 2do ->save_comment
            continue;
        if (T_OPEN_TAG == $y->tok) {
            $echo = in_array($new->tok, [T_ECHO, T_PRINT]) && ($new = $this->tok($y->i + 2));
            $y->str = $echo ? '<?=' : ($this->in_html ? '<?' : '<?php ');
        }
        if (!$y->i)
            $y->str .= "/* Minified with Coresky framework, https://coresky.net */";
        if (T_WHITESPACE == $y->tok) {//2do
            if ($not($pv->str[-1]) || !$new || $not($new->str[0]))
                continue;
            $y->str = ' ';
        }
        $this->int_bracket($y);
        if (!$this->in_str && ']' == $y->str && ',' == $pv->str)
            $out = substr($out, 0, -1);

        $out .= $y->str;
        $pv = $y;
    }
    return $out;
#.minify

#.data ///////////////////////////////////////////////////////////////////////////////////
tokens_ign: [$T_WHITESPACE, $T_COMMENT, $T_DOC_COMMENT] # step1
curly_reason: [ # step1
  $T_DECLARE, $T_NAMESPACE, $T_USE, $T_SWITCH, $T_MATCH, $T_DO, $T_FN, $T_OBJECT_OPERATOR,
  @@inc(.loops), @@inc(.ifels), @@inc(.newdn), @@inc(.try)
]
optim_key: [ # step1
  @@inc(.com3), $T_WHITESPACE, $T_VARIABLE,
  $T_LNUMBER, $T_DNUMBER, $T_CONSTANT_ENCAPSED_STRING
]
not_nl_after_curly: [',', '(', ')', ']', '}', ;, $T_CATCH, $T_FINALLY, $T_ELSE, $T_ELSEIF]
double_nl: [@@inc(.newdn), $T_NAMESPACE]
semicolon_prev: [@@inc(.modifiers), @@inc(.sets), @@path(double_nl), $T_CONST, $T_USE, $T_FUNCTION, $T_DECLARE]
ctrl_d1: [@@inc(.loops), $T_IF]
comments: @inc(.com3)
endword: @inc(.ends)
altsyntax: [@@inc(.loops), $T_IF, $T_ELSEIF, $T_SWITCH, $T_DECLARE, $T_CASE, $T_DEFAULT]
no_nl_after: [$T_TRY, $T_DO, $T_SWITCH, $T_MATCH, '{', ';', ':']
no_nl_after_else: [@@path(no_nl_after), @@inc(.loops), $T_IF]
space_head: [$T_ELLIPSIS]
space_tail: [@@inc(.loops), $T_IF, $T_CATCH, $T_ECHO, $T_MATCH]
space_tail_2: [$T_NEW, $T_INSTANCEOF, $T_EXTENDS, $T_IMPLEMENTS]
space_both: [>, <, /, %, *, +, $T_USE, $T_AS, $T_DOUBLE_ARROW, $T_POW, @@inc(.op_eq), @@inc(.op_is), @@inc(.shift)]
expr_reset: [@@path(altsyntax), $T_ELSE, $T_FUNCTION]
expr_tok: [$T_OBJECT_OPERATOR, @@inc(.logic), @@inc(.bools)]
minus: [@@inc(.id), $T_LNUMBER, $T_DNUMBER, $T_VARIABLE, $T_STRING, ')', ']']
#.data

# =====================================================================================
# ================================           RULES           ==========================
# =====================================================================================
#.tag_rules
- on: T_OPEN_TAG == $y->tok
  do: |
    $y->i ? ($line .= $y->str) : $put(trim($y->str) . "\n\n") or $y->len = 0;
    $in_php = true;
- on: T_CLOSE_TAG == $y->tok
  do: |
    '' === $line || ' ' == $line[-1] or $y->str = " $y->str";
    if ("\n" == $y->str[-1]) {
        $put($y->str);
    } else {
        $y->new ? ($line .= $y->str) : $put("\n\n" . trim($y->str));
    }
    $in_php = false;
- on: T_HALT_COMPILER == $y->tok
  do: |
    $line .= $y->str;
    $in_php = false;
    $this->in_html = 1;
#.tag_rules

#.multilines
- on: in_array($y->tok, [T_INLINE_HTML, T_CONSTANT_ENCAPSED_STRING])
  do: |
    if (T_INLINE_HTML == $y->tok)
        $this->in_html = $y->i;
    if (false !== ($pos = strrpos($y->str, "\n"))) {
        $put(substr($y->str, 0, $pos + 1));
        $line = substr($y->str, $pos + 1);
    } else {
        $line .= $y->str;
    }
#.multilines

#.elseifelse
- on: ($else = T_ELSE == $y->tok) || T_ELSEIF == $y->tok
  do: |
    $new = $fnew($y);
    $else or $new = $fnew($close = $new->close);
    $alt = ':' == $new->str;
    $prev = $depth;
    [$depth, $d1, $d2] = $alt || $else ? array_pop($ifs) : end($ifs);

    if ($this->in_html) {
        $line .= $else ? $y->str : "$y->str ";
    } else {
        $no_nl = $alt ? false : in_array(
            $new->tok ?: $new->str,
            $else ? $this->_no_nl_after_else : $this->_no_nl_after,
            true
        );
        if ('}' == $pv->str && ($depth < $prev || !$no_nl))
            $put("\n");
        if ($alt) { # altsyntax
            $put($trim() ? '' : "\n", $else ? $y->str : "$y->str ");
        } elseif ($no_nl) {
            $trim() ? $put('') : $line .= ' ';
            $line .= $else && !$new->tok ? $y->str : "$y->str ";
        } elseif ($else) {
            $put($trim() ? '' : "\n", $y->str);
            $d1++;
            $put(1, "\n");
        } else { # T_ELSEIF
            $trim() ? $put('', "$y->str ") : ($line .= "$y->str ");
            $dar = $close;
        }
    }
#.elseifelse

#.endwords
- on: in_array($y->tok, $this->_endword)
  do: |
    [$depth, $d1, $d2] = array_pop($ifs);
    if (T_ENDIF == $y->tok)
        array_pop($ifs);
    if ($this->in_html) {
        $line .= $y->str;
    } else {
        $put($trim() ? '' : "\n", $y->str);
    }
#.endwords

#.casecolon
- on: in_array($y->tok, [T_SWITCH, T_CASE, T_DEFAULT])
  do: |
    if (T_SWITCH == $y->tok) {
        $line .= $y->str . ' ';
        $exp = [];
    } else {
        $s3 = true;
        $s5 ? $put(-1, '', $y->str) : ($line .= $y->str);
        T_DEFAULT == $y->tok or $line .= ' ';
        $mem = $y->len ? [$y->len, $y->cnt] : false;
    }
    $s5 = 0;
- on: ':' == $y->str
  do: |
    if ($q8 == count($stk)) { # ternary with nl
        $put("\n", ': ');
        [$q8] = [0, $depth--, $d1--];
    } elseif ($s3) { # after T_CASE, T_DEFAULT
        if ($mem)
            $correct($y->new, $mem + [2 => strlen(trim($line)) + 1]);
        $exp = [];
        $put($s5 = 1, ":\n");
        $s3 = false;
    } elseif (T_ELSE == $pv->tok) {
        goto altelse; # ELSE:
    } elseif (')' == $pv->str) {
        if (in_array($pv->reason ?? 0, $this->_altsyntax)) {
            altelse:
            $ifs[] = [$depth, $d1, $d2];
            [$d1, $d2] = [0, count($ifs)];
            $this->in_html ? ($line .= ':') : $put(1, ":\n");
        } elseif (T_FUNCTION == $x->reason) { # function return type
            $line .= ': ';
        } else {
            $line .= ' : '; # ternary
        }
    } elseif ('?' == $pv->str) { # ?:
        $line .= ': ';
    } elseif ($q9) { # ternary
        $line .= ' : ';
    } else {
        $top =& $stk[array_key_last($stk)];
        '{' == $top[2] ? $put(":\n") : ($line .= ': '); # goto-label : named-param
    }
#.casecolon

#.expr_tok
- on: in_array($y->tok, $this->_expr_tok) # -> ?-> and or xor && ||
  do: |
    $space = T_OBJECT_OPERATOR == $y->tok ? '' : ' '; # nullsafe ?-> also work
    if (in_array($y->i, $exp)) {
        if ($space && '(' != $pv_exp && !$q7) {
            $q7 = ++$d1;
            ++$depth;
        }
        $trim() ? ($line .= $y->str . $space) : $put("\n", $y->str . $space);
    } else {
        $line .= $space . $y->str . $space;
    }
#.expr_tok

#.chars
- on: '?' == $y->str
  do: |
    if (in_array($y->i, $exp)) {
        $d1++;
        $put(1, "\n", '? ');
        $q8 = count($stk);
    } elseif (T_FUNCTION == $x->reason || $x->last) { # nullsafe
        $line .= T_FUNCTION == $x->reason ? '?' : ' ?';
    } else {
        $q9 = true; # ternary
        $line .= ':' == $y->new->str ? ' ?' : ' ? ';
    }
- on: '-' == $y->str
  do: |
    $line .= in_array($pv->tok ?: $pv->str, $this->_minus, true) ? ' - ' : '-';
- on: '.' == $y->str
  do: |
    if (in_array($y->i, $exp)) {
        $q7 or [$q7 = ++$d1, ++$depth];
        $put("\n", '. ');
    } else {
        $line .= $ws($y);
    }
- on: ';' == $y->str
  do: |
    $q7 = $q9 = 0;
    if ($this->in_html || $this->in_par) {
        $line .= '; ';
    } else {
        $d1 && $y->new && $reset_ifs($fnew($y));
        $put(";\n");
    }
- on: '|' == $y->str
  do: $line .= T_FUNCTION == $x->reason ? '|' : $ws($y);
- on: '&' == $y->str
  do: |
    $space = T_FUNCTION != $pv->tok && ('$' != $y->new->str[0] || T_VARIABLE == $pv->tok || T_LNUMBER == $pv->tok || T_STRING == $pv->tok && T_FUNCTION != $x->reason || '=' == $pv->str);
    $line .= $alfa($pv->str[-1]) ? $ws($y, $space ? ' ' : '') : ($space ? '& ' : '&');
- on: '=' == $y->str
  do: $line .= ' =' . ('&' == $y->new->str ? '' : ' ');
- on: T_RETURN == $y->tok
  do: $line .= $y->str . (';' == $y->new->str ? '' : ' ');
#.chars

#.comments
- on: $y->com
  do: |
    if ($at && 1 & $y->com)
        return [$y, str_pad('', $this->max_length)];
    if ($trim() && !$pv->com && !(8 & $y->com) && (!$y->new || !in_array($y->new->tok, $this->_comments)) && $ok_com($y)) {
        $out = substr($out, 0, -1) . " $y->str\n";
        $put('');
        if ($y->len)
            $correct($y->new, [$y->len, $y->cnt, strlen($y->str)]);
    } elseif (1 & $y->com) { # new line
        if ($y->len)
            $correct($y->new, [$y->len, $y->cnt, strlen($y->str)]);
        $put($ws($y, '') . "\n");
    } else {
        $line .= $y->str;
    }
#.comments

#.space_tail
- on: in_array($y->tok, $this->_space_tail)
  do: |
    $line .= $y->str . ' ';
    if (in_array($y->tok, $this->_ctrl_d1)) {
        if (T_IF == $y->tok)
            $ifs[] = [$depth, $d1, $d2];
        $new = $fnew($dar = $fnew($y)->close);
        if (in_array($new->tok ?: $new->str, $this->_no_nl_after, true))
            $dar = 0;
    }
#.space_tail

#.expr_nl
head:
  - |
    $len = $y->len;
    if ($bkt = $y->close < 0) {
        $y->close = -$y->close;
        $y->len = $y->cnt[-1];
    }
    $len -= ($corr = $y->corr ?? 0); # correction
    $bkt or $y->len = $len;
    $exp = $cnt = [];
    $sz = $pv = $nx = $ter = $or = 0;
    $stm = '';
    foreach ($y->cnt as $i => &$val) {
        if ($i < $y->i)
            continue;
        $val -= $corr;
        $z = is_array($a = $this->tok[$i]) ? $a[1] : $a;
        $z = '>' == $z[-1] ? '>' : $z[0];
        if (!$stm || '>' != $z || $val - $pv > 9)
            $stm .= $z;
        $cnt[$i] = [$len, $pv = $nx = $val, $z, 0];
        $nx =& $cnt[$i][0];
        if ('?' == $z)
            $ter =& $cnt[$i][3];
        if (':' == $z)
            $ter = $val;
    }
    //if (3977 == $y->i) { trace($cnt, '==='); }
    unset($nx, $ter);
    $max = $calc_max($len, $n) - $depth * $this->tab; # ?->-> ?: ./%*+- ||&& and or xor
    if (!$cnt || $len < $max)
        return [];
    $obj = strlen($stm) > 1 && '' === trim($stm, '>')
        or $or = false !== strpos($stm, '|') && preg_match("/^[\|&>]+$/", $stm);
    foreach ($cnt as $i => $ary) {
        [$nx, $cur, $z, $ter] = $ary;
        if ($obj) {
            $exp[] = $i;
        } elseif ($or) {
            '|' == $z and $exp[] = $i;
        } elseif ($ter) {
            $ter - $cur < 26 or $exp[] = $i;
            $sz = $ter;
        } elseif (!in_array($z, ['>', '?', ':']) && ($nx - $sz > $max || $nx == $len)) {
            $nl = $nx != $len || $nx - $sz > $this->max_length;
            for ($j = $i + 1, $sm = $cur; $nl && $sm < $nx; $j++) {
                is_string($str = $this->tok[$j]) or $str = $str[1];
                if ('{' == $str || '(' == $str && $nx == $len && $nx - $cur > 0.8 * $this->max_length)
                    $nl = false;
                $sm += ' ' == $str ? 1 : strlen(trim($str));
            }
            if ($nl) {
                $exp[] = $i;
                $sz = $cur;
            } else {
                $sz = $nx;
            }
        }
    }
    return $exp;
#.expr_nl

#.double_nl
head:
  - |
    for ($str = '', $z = $y; in_array($z->tok, $this->_semicolon_prev); ) {
        $str .= $z->str;
        $z = $this->tok($z->i, true);
    }
    $nl = $str && $x->last && $x->last != $str;
    $y->com or $x->last = $str;
    return $nl;
#.double_nl

#.brackets
- on: $oc || ',' == $y->str
  do: |
    if ($at) {
        if ($oc > 0) { # open
            if ($y->len > 80 || '{' == $y->str)
                return [$y, $out . $line];
        } elseif ($y->i >= $to) { # close or comma
            return [$y, $out . $line];
        }
        $line .= $y->str . ($oc ? '' : ' ');
    } else {
        if ('(' == $y->str && in_array($pv->tok, $this->_altsyntax)) {
            [,, $_reason, $close] = $this->x[$y->i];
            $this->x[$close] = [0, 0, $_reason, $close];
        #} elseif (')' == $y->str && $q7) {
        #    [$q7] = [0, $depth--, $d1--];
        }
        if ($oc) {
            $y->line =& $line;
            $_depth = $depth;
            $this->indents($oc, $y, $pv->tok, $put, $exp);
        } else { # comma
            $top =& $stk[array_key_last($stk)];
            top:
            if (!$top[0]) {
                $line .= ', ';
            } elseif (true === $top[0]) {
                if ($q7)
                    [$q7] = [0, $depth--, $d1--];
                $put(",\n");
            } elseif (1 == $top[0]) {
                strlen($line) < $top[2] ? ($line .= ', ') : $put(",\n");
            } else {
                $easy = '[' != $top[2] || $top[0] < 10;
                $top = [$easy ? '{' != $top[2] : 1, $top[1], $easy ? 0 : $calc_max($top[3])];
                goto top;
            }
        }
        if ($dar == $y->i) { # )
            $put(1, "\n");
            $d1++;
        } elseif ('{' == $y->str && $_depth != $depth) {
            $ifs[] = [$_depth, $d1, $d2, $q7];
            [$d1, $d2, $q7] = [0, count($ifs), $q9 = 0];
            if (T_FUNCTION == $x->reason)
                $x->reason = 0;
            $x->last = '';
        } elseif ('}' == $y->str && $_depth != $depth) {
            [$depth, $d1, $d2, $q7] = array_pop($ifs);
            in_array($y->reason, [T_TRY, T_DO]) or $y->new && $reset_ifs($fnew($y));
            $x->last = '';
        }
    }
#.brackets
