#!/usr/bin/env php
<?php

if (1 == $argc)
    $argv = [0, ''];
$d = 'd' == $argv[1];
if ($d || 'php' == $argv[1]) {
    require __DIR__ . '/w2/rare.php';
    $dirs = Rare::walk_dirs('.');
    if ($d) {
        print_r($dirs);
    } else foreach($dirs as $one) {
        $files = Rare::list_path($one, 'is_file');
        foreach($files as $one)
            system("php -l $one");
    }
    echo "\n";
    exit;
}

$dir_run = function ($cwd = false, &$found = null) {
    static $dir_r, $ary;
    if (null === $found) # is get "dir run"
        return $dir_r;
    $dir_r = $cwd;
    $ary =& $found;
    return function (&$m) use (&$ary) {
        $conf = function ($d = '') {
            $d and $d .= '/';
            $has_dir = is_dir($d . 'mvc') || is_dir($d . 'w3');
            if (!is_file($d . 'conf.php') || !$has_dir)
                return false;
            $app = (bool)strpos(file_get_contents($d . 'conf.php'), '/sky.php');
            return $d && $app || !$d && !$app;
        };
        if (is_dir('.git'))
            $ary[1] = getcwd(); # git dir
        if ($conf())
            $ary[2] = getcwd(); # ware
        in_array($m, $list = ['main', 'blue']) or $m && array_unshift($list, $m);
        foreach ($list as $main) {
            if ($conf($main)) {
                $m = $main;
                return $ary[0] = true; # the coresky app
            }
        }
        return false;
    };
};

$found = [false, false, false];
$test = $dir_run($cwd = getcwd(), $found);
$dir_m = '';
do {
    if ($test($dir_m))
        break;
    $dir_m = basename($cwd);
    chdir('..'); # updir
    if ($cwd == ($_cd = getcwd()))
        break;
} while($cwd = $_cd);

if ($found[0]) {
    require "$dir_m/conf.php";
} else {
    chdir($cwd = $found[1] ?: $found[2] ?: $dir_run());
    define('DIR_S', __DIR__);
    require DIR_S . '/sky.php';
    require DIR_S . '/w2/console.php';
    Console::constants();
}
define('DIR', $cwd);
new SKY;
SKY::$debug = 1;
new Console($argv, $found);
echo "\n";
